	Описание проекта Generation

	Класс Main - главный класс, запускающий всю программу.
-вызывает метод runFormedTriad() класса FormedTriad.

	Класс Triad содержит экземпляр объекта Триада.
Данный класс описывает атрибуты и поведение объекта Триада. Содержит следующие поля:
    label1 (поле текущей метки типа String)
    operand1 (поле первого операнда типа String)
    operand2 (поле второго операнда типа String)
    operation (поле операции типа String)
    label2 (поле метки следующего состояния типа String)
    label3 (поле метки предыдущего состояния типа String)

	Класс Priority содержащит экземпляр объекта Приоритет.
Данный класс описывает атрибуты и поведение объекта Приоритет. Содержит следующие поля:
	name (поле имени приоритетной операции типа String)
    number (поле значения приоритета типа int)

	Класс Operations содержащит вложенные классы Arithmetic, Assign, Logic, KeyWords.
		Класс Arithmetic содержит следующие поля:
		plus = "+" (поле операции сложения типа String)
        min = "-" (поле операции  вычитания типа String)
        multi = "*" (поле операции умножения типа String)
        div = "/" (поле операции деления типа String)
		
		Клаcс Assign содержит следующие поле:
		assign = ":=" (поле операции присвоения типа String)
		
		
		Клаcс Logic содержит следующие поле:
		unEqual = "!=" (поле логической операции "не равно" типа String)
        equals = "==" (поле логической операции "равно" типа String)
        moreEqual = ">=" (поле логической операции "больше или равно" типа String)
        lessEqual = "<=" (поле логической операции "меньше или равно" типа String)
        more = ">" (поле логической операции "больше" типа String)
        less = "<" (поле логической операции "меньше" типа String)
		
		Клаcс KeyWords содержит следующие поле:
	    xdo = "do" (поле ключевого слова "do" типа String)
        xwhile = "while" (поле ключевого слова "while" типа String)
		
	Класс Reader реализует считывание из файла 
Содержит метод run, возвращающий динамический спискок, каждый элемент которого отдельный элемент новой строки файла input.txt,
в случае возникновения ошибки считывания отловит исключение IOException и выведет "Error reading file!".
	
	Класс Polize позволяет из входного массива цепочки операций вернуть массив операций в виде польско-инверсной записи.
	Содержит динамический массив out типа String, формирующийся в результате выполнения метода calcPoliz() и
	стек для формирования массива out
	private static ArrayList<String> out = new ArrayList<>();
    private static Stack<Priority> work = new Stack<>();
	
	Метод calcPoliz():
	-принимает динамический массив типа String
    -создаёт экземпляры объекта Priority для каждой операции с соответствующим операции приоритетом
	-проходит по массиву и при нахождии элемента операции вызывает метод solution()
	-добавляет в массив out операнды и возвращает его
	
	Метод solution():
	-принимает экземпляр объекта Приоритет
	-добавляет объект в стек
	-извлекает объект из стека и добавляет его в массив out
	
	Клаcс FormedTriad фоормирует список Триад.
	Содержит следующие атрибуты и методы:
	beginList (динамический массив типа String - исходный массив);
    polizeList (динамический массив типа String - массив, после формирования ПОЛИЗА по начальному массиву);
    tableTriad = (динамический массив типа Triad - массив триад);
    labelIndex (переменная типа int - порядковый номер метки);
    private static String numLabelForDo (переменная типа String - номер метки после ключевого слова "do");
	
	Метод run():
	Запускает считывание из файла и формирование списка beginList.
	
	Метод deleteBegin():
	Удаляет ключевое слово начала программы "begin" (оно необходимо в предыдущем модуле, но излишне в данном).
	
	Метод cutList():
	Возвращает массив, каждый элемент которого сформирован из считанного массива beginList до символа(элемента) ";"
	
	Метод incLabel():
	Получает переменную типа String (Метку элемента, значение которого эквивалентно ключевому слову "do") и 
	увеличевает эту метку на 1. Необходимость данного метода в том, что на этапе вызова метода, необходимо запомнить
	номер метки следующего элемента, которой в этот момент не существует.
	Возвращает переменную типа String, с увеличенным значением метки на 1.
	
	Метод addTriad():
	Получает полизированный массив, тип встреченной операции и номер текущей метки
	Добавляют новый экземпляр объекта в массив tableTriad, установив необходимые значения полей и удалив из поляризированного массива  
	использованные операнды и тип операции с ними.
	Возвращает массив tableTriad с новым элементом.
	
	Метод formTriad():
	Получает полизированный массив, сформированный методами cutList() и calcPoliz() и добавляет в массив tableTriad 
	экземпляры объекта Triad вызвав метод addTriad(), при формировании полей экземпляра объекта Triad  учитывает нахождение 
	в цикле do while.
	Возвращает массив tableTriad с добавленными элементами.
	
	Метод unFormedTriad():
	вызывает метод run()
	вызывает метод deleteBegin()
	
	Проходит по массиву beginList и выполняет нарезку поляризированного массива методами cutList() и calcPoliz()
	и формирование массива tableTriad методом formTriad().
	Возвращает массив tableTriad.
	
	*******************************************************************************************************************************************************
	Данная реализация генерации объектного когда основа на корректной работе модуля оптимизации кода (отдельный проект другого разработчика) и предпочтении
	лица, реализующего модуль ассемблирования, на вход программы которого подаются выходные данные данной программы, а также лица, принимающего комплексную 
	работу, включающию несколько модулей (проектов), в том числе и данный.
	*******************************************************************************************************************************************************
	
	ПРИМЕР
	Входные данные: 
	begin do S := S + 1 + I ; Q := S * S ; while S < Q + 16 ; do S := S + 1 ; while S < Q + 16 ; end ; 
	
	Полученный массив beginList:
	[begin, do, S, :=, S, +, 1, +, I, ;, Q, :=, S, *, S, ;, while, S, <, Q, +, 16, ;, do, S, :=, S, +, 1, ;, while, S, <, Q, +, 16, ;, end, ;]
	
	Полученные элменты массива polizeList
	
	Poliz expression №1: 
	[do, S, S, 1, +, I, +, :=]

	Poliz expression №2: 
	[Q, S, S, *, :=]

	Poliz expression №3: 
	[while, S, Q, 16, +, <]

	Poliz expression №4: 
	[do, S, S, 1, +, :=]

	Poliz expression №5: 
	[while, S, Q, 16, +, <]
	
	Полученная таблица триад
	Table of triad: 
	Triad M0 S 1 + M1 M-1 
	Triad M1 M0 I + M2 M0 
	Triad M2 S M1 := M3 M1 
	Triad M3 S S * M4 M2 
	Triad M4 Q M3 := M5 M3 
	Triad M5 Q 16 + M6 M4 
	Triad M6 S M5 < M0 M5 
	Triad M7 S 1 + M8 M6 
	Triad M8 S M7 := M9 M7 
	Triad M9 Q 16 + M10 M8 
	Triad M10 S M9 < M7 M9 